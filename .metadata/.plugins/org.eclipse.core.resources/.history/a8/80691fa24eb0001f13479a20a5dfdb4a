
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Dec 02 02:40:07 CET 2024
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Mon Dec 02 02:40:07 CET 2024
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\003\005\000\002\004" +
    "\004\000\002\005\004\000\002\005\003\000\002\006\005" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\010\005\000\002\010\003\000\002\012\003\000\002" +
    "\012\003\000\002\013\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\003\000\002\015\003\000\002\015\003" +
    "\000\002\016\012\000\002\011\005\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\052\000\004\004\005\001\002\000\004\002\054\001" +
    "\002\000\010\007\014\010\013\011\012\001\002\000\014" +
    "\006\ufffd\007\ufffd\010\ufffd\011\ufffd\017\ufffd\001\002\000" +
    "\004\006\052\001\002\000\004\005\051\001\002\000\014" +
    "\006\021\007\014\010\013\011\012\017\016\001\002\000" +
    "\004\006\ufff9\001\002\000\004\006\ufffa\001\002\000\004" +
    "\006\ufffb\001\002\000\006\005\ufff6\013\ufff6\001\002\000" +
    "\004\006\037\001\002\000\014\006\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\017\ufffe\001\002\000\006\005\ufff7\013\ufff7\001" +
    "\002\000\004\012\026\001\002\000\006\005\uffff\013\024" +
    "\001\002\000\006\005\ufff5\013\ufff5\001\002\000\006\006" +
    "\021\017\016\001\002\000\006\005\ufff8\013\ufff8\001\002" +
    "\000\006\006\030\016\027\001\002\000\012\005\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\001\002\000\012\005\uffef\013\uffef" +
    "\014\uffef\015\uffef\001\002\000\012\005\ufff1\013\ufff1\014" +
    "\ufff1\015\ufff1\001\002\000\012\005\ufff4\013\ufff4\014\033" +
    "\015\034\001\002\000\006\006\030\016\027\001\002\000" +
    "\006\006\030\016\027\001\002\000\012\005\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\001\002\000\012\005\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\001\002\000\004\020\040\001\002\000\004" +
    "\021\041\001\002\000\004\006\042\001\002\000\006\022" +
    "\uffec\030\uffec\001\002\000\006\022\045\030\044\001\002" +
    "\000\004\006\050\001\002\000\004\023\046\001\002\000" +
    "\006\006\021\017\016\001\002\000\006\005\uffee\013\uffee" +
    "\001\002\000\006\022\uffed\030\uffed\001\002\000\004\002" +
    "\000\001\002\000\004\013\053\001\002\000\014\006\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\017\ufffc\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\052\000\004\003\003\001\001\000\002\001\001\000" +
    "\012\004\007\005\010\006\005\007\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\016\007\006\010\021\012\017\013\014\016\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\024\013\014\016\022\001\001\000\002" +
    "\001\001\000\006\014\031\015\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\035\001\001\000\004\015\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\046\013\014\016\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public int errNo = 0;

    public static void main( String[] args )
    {
        try
        {
            FileReader file = new FileReader( args[0] );
            Scanner scanner = new MPLexer( file );
            Parserbezoporavka parser = new Parserbezoporavka( scanner );
			parser.parse();

			if ( parser.errNo == 0)
				System.out.println( "Analiza je zavrsena. U kodu nema sintaksnih gresaka!" );
			else
				System.out.println( "Analiza je zavrsena. Broj sintaksnih gresaka: " + parser.errNo );
        }
        catch( Exception e )
        {
            e.printStackTrace();
        }
    }

    public void syntax_error(Symbol current_token)
    {

    }

    public void report_error(String message, Object info)
    {
        System.out.println( message );
    }

    public int getLine()
    {
        return ( ( MPLexer ) getScanner() ).getLine();
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NameList ::= ID 
            {
              Object RESULT = null;
		
    System.out.println("NameList! Linija"  + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NameList ::= NameList COMMA ID 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ApplyExpression ::= FOR ID IN OPENSQUARE NameList CLOSEDSQUARE APPLY Expression 
            {
              Object RESULT = null;
		
    System.out.println("ApplyExpression! Linija" + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*ApplyExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TermExpression ::= ID 
            {
              Object RESULT = null;
		
    System.out.println("TermExpression! Linija"  + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*TermExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TermExpression ::= CONST 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*TermExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ArithmeticExpression ::= TermExpression 
            {
              Object RESULT = null;
		
    System.out.println("ArithmeticExpression! Linija"  + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*ArithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ArithmeticExpression ::= ArithmeticExpression MINUS TermExpression 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*ArithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ArithmeticExpression ::= ArithmeticExpression PLUS TermExpression 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*ArithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Assignment ::= ID ASSIGN ArithmeticExpression 
            {
              Object RESULT = null;
		
    System.out.println("Assignment! Linija"  + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Assignment*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expression ::= ApplyExpression 
            {
              Object RESULT = null;
		
    System.out.println("Expression! Linija"  + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expression ::= Assignment 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expressions ::= Expression 
            {
              Object RESULT = null;
		
    System.out.println("Expressions!Linija" + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Expressions*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expressions ::= Expressions SEMICOLON Expression 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Expressions*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= BOOL 
            {
              Object RESULT = null;
		
    System.out.println("Type! Linija" + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= FLOAT 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Type ::= INT 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaration ::= Type ID SEMICOLON 
            {
              Object RESULT = null;
		
    System.out.println("Declaration! Linija"  + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Declaration*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declarations ::= Declaration 
            {
              Object RESULT = null;
		
    System.out.println("Declarations! Linija" + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declarations ::= Declarations Declaration 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Block ::= Declarations Expressions 
            {
              Object RESULT = null;
		
    System.out.println("Blok! Linija" + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= MAIN Block EXIT 
            {
              Object RESULT = null;
		
    System.out.println("Program! Linija" + parser.getLine());

              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

