
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Dec 08 05:20:31 CET 2024
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import SymbolTable.*;

/** CUP v0.10k generated parser.
  * @version Sun Dec 08 05:20:31 CET 2024
  */
public class Parserbezoporavka extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parserbezoporavka() {super();}

  /** Constructor which sets the default scanner. */
  public Parserbezoporavka(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\003\005\000\002\004" +
    "\004\000\002\005\004\000\002\005\003\000\002\006\005" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\010\005\000\002\010\003\000\002\012\003\000\002" +
    "\012\003\000\002\013\005\000\002\014\004\000\002\014" +
    "\005\000\002\014\003\000\002\015\003\000\002\015\003" +
    "\000\002\016\012\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\011\005\000\002\011\002\000\002" +
    "\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\051\000\004\004\005\001\002\000\004\002\053\001" +
    "\002\000\010\026\013\027\006\030\014\001\002\000\004" +
    "\025\ufffb\001\002\000\014\013\ufffd\025\ufffd\026\ufffd\027" +
    "\ufffd\030\ufffd\001\002\000\004\025\051\001\002\000\004" +
    "\005\050\001\002\000\014\013\016\025\021\026\013\027" +
    "\006\030\014\001\002\000\004\025\ufff9\001\002\000\004" +
    "\025\ufffa\001\002\000\006\005\ufff6\007\ufff6\001\002\000" +
    "\004\025\036\001\002\000\014\013\ufffe\025\ufffe\026\ufffe" +
    "\027\ufffe\030\ufffe\001\002\000\006\005\ufff7\007\ufff7\001" +
    "\002\000\004\006\026\001\002\000\006\005\uffff\007\024" +
    "\001\002\000\006\005\ufff5\007\ufff5\001\002\000\006\013" +
    "\016\025\021\001\002\000\006\005\ufff8\007\ufff8\001\002" +
    "\000\006\012\027\025\030\001\002\000\014\005\ufff0\007" +
    "\ufff0\011\ufff0\012\ufff0\025\ufff0\001\002\000\014\005\uffef" +
    "\007\uffef\011\uffef\012\uffef\025\uffef\001\002\000\014\005" +
    "\ufff1\007\ufff1\011\ufff1\012\ufff1\025\ufff1\001\002\000\014" +
    "\005\ufff4\007\ufff4\011\034\012\027\025\030\001\002\000" +
    "\014\005\ufff3\007\ufff3\011\ufff3\012\ufff3\025\ufff3\001\002" +
    "\000\006\012\027\025\030\001\002\000\014\005\ufff2\007" +
    "\ufff2\011\ufff2\012\ufff2\025\ufff2\001\002\000\004\014\037" +
    "\001\002\000\004\015\040\001\002\000\010\016\uffe9\024" +
    "\uffe9\025\041\001\002\000\006\016\uffe8\024\uffe8\001\002" +
    "\000\006\016\044\024\043\001\002\000\004\025\047\001" +
    "\002\000\004\017\045\001\002\000\006\013\016\025\021" +
    "\001\002\000\006\005\uffee\007\uffee\001\002\000\006\016" +
    "\uffea\024\uffea\001\002\000\004\002\000\001\002\000\004" +
    "\007\052\001\002\000\014\013\ufffc\025\ufffc\026\ufffc\027" +
    "\ufffc\030\ufffc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\051\000\004\003\003\001\001\000\002\001\001\000" +
    "\012\004\010\005\011\006\006\007\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\016\007\007\010\021\012\017\013\014" +
    "\016\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\024\013\014\016\022\001\001\000\002" +
    "\001\001\000\006\014\031\015\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\032" +
    "\001\001\000\002\001\001\000\004\015\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\045\013\014" +
    "\016\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parserbezoporavka$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parserbezoporavka$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parserbezoporavka$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

 symbolTable = new SymbolTable();

    }



	public int errNo = 0;
	public int warnNo = 0;

	SymbolTable symbolTable;
	
    public static void main( String[] args )
    {
        try
        {
            FileReader file = new FileReader( args[0] );
            Scanner scanner = new GenerisanaKlasa( file );
            Parserbezoporavka parser = new Parserbezoporavka( scanner );
			parser.parse();
			parser.checkWarnings();
			if ( parser.errNo == 0)
				System.out.println( "Analiza je zavrsena. U kodu nema sintaksnih gresaka!" );
			else
				System.out.println( "Analiza zavrsena. Broj gresaka: " + parser.errNo 
		         + " Broj upozorenja: " + parser.warnNo );
        }
        catch( Exception e )
        {
            e.printStackTrace();
        }
    }

	public void checkWarnings()
    {
      SymbolNode current = symbolTable.getVariables();
      while ( current != null )
      {
      	Variable var = ( Variable ) current;
      	if ( var.last_def == -1 && var.last_use == -1 )
      	{
      		System.out.println( "Upozorenje: Promenljiva " + var.name + 
      			" je deklarisana, ali se nigde ne koristi." );
      		warnNo++;
      	}
      	else if ( var.last_def > var.last_use )
      	{
      		System.out.println( "Upozorenje: Vrednost dodeljena promeljivoj " +
      		    var.name + " u liniji " + var.last_def + " se nigde ne koristi." );
      		warnNo++;
      	}
      	current = current.next;
      }
    }

    public void syntax_error(Symbol current_token)
    {

    }

    public void report_error(String message, Object info)
    {
        System.out.println( message );
    }

    public int getLine()
    {
        return ( ( GenerisanaKlasa ) getScanner() ).getLine();
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parserbezoporavka$actions {
  private final Parserbezoporavka parser;

  /** Constructor */
  CUP$Parserbezoporavka$actions(Parserbezoporavka parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parserbezoporavka$do_action(
    int                        CUP$Parserbezoporavka$act_num,
    java_cup.runtime.lr_parser CUP$Parserbezoporavka$parser,
    java.util.Stack            CUP$Parserbezoporavka$stack,
    int                        CUP$Parserbezoporavka$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parserbezoporavka$result;

      /* select the action based on the action number */
      switch (CUP$Parserbezoporavka$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NameList ::= ID 
            {
              Object RESULT = null;
		
		RESULT = new ArrayList();
		RESULT.add(ime);

              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(7/*NameList*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NameList ::= 
            {
              Object RESULT = null;
		
		RESULT = niz;
		RESULT.add(ime);

              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(7/*NameList*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NameList ::= NameList COMMA ID 
            {
              Object RESULT = null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-2)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-2)).right;
		Object niz = (Object)((java_cup.runtime.Symbol) CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-2)).value;
		int imeleft = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).value;

              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(7/*NameList*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Konstanta ::= BOOLCONST 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right;
		Bool c = (Bool)((java_cup.runtime.Symbol) CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).value;
		
            RESULT = new Constant( parser.symbolTable.getType( "bool" ), c );
        
              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(13/*Konstanta*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Konstanta ::= FLOATCONST 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right;
		Float c = (Float)((java_cup.runtime.Symbol) CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).value;
		
            RESULT = new Constant( parser.symbolTable.getType( "double" ), c );
        
              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(13/*Konstanta*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Konstanta ::= INTCONST 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).value;
		
            RESULT = new Constant( parser.symbolTable.getType( "int" ), c );
        
              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(13/*Konstanta*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ApplyExpression ::= FOR ID IN OPENSQUARE NameList CLOSEDSQUARE APPLY Expression 
            {
              Object RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-6)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-6)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-6)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-3)).value;
		
   
    Variable var = parser.symbolTable.getVar( ime );

    if (var == null) {
        parser.report_error("Promenljiva " + varName + " nije deklarisana.", $2);
    } else if (!var.getType().equals(listType)) {
        parser.report_error("Promenljiva " + varName + " mora biti istog tipa kao i NameList.", $2);
    }

              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(12/*ApplyExpression*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-7)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TermExpression ::= ID 
            {
              Object RESULT = null;
		
    

              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(11/*TermExpression*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TermExpression ::= CONST 
            {
              Object RESULT = null;

              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(11/*TermExpression*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ArithmeticExpression ::= TermExpression 
            {
              Object RESULT = null;
		
    

              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(10/*ArithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ArithmeticExpression ::= ArithmeticExpression MINUS TermExpression 
            {
              Object RESULT = null;

              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(10/*ArithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ArithmeticExpression ::= ArithmeticExpression TermExpression 
            {
              Object RESULT = null;
		int PLUSleft = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-1)).left;
		int PLUSright = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-1)).right;
		Object PLUS = (Object)((java_cup.runtime.Symbol) CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-1)).value;

              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(10/*ArithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Assignment ::= ID ASSIGN ArithmeticExpression 
            {
              Object RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-2)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-2)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).value;
		

	
	Variable var = parser.symbolTable.getVar( ime );
	if ( var == null )
	{
		System.out.println( "Greska u liniji " + parser.getLine() + ": promenljiva " + ime + " nije deklarisana.");
		parser.errNo++;
	}
	else 
	{
		var.last_def = parser.getLine();
		if ( var.type.tkind != i.tkind )
		{
			System.out.println( "Greska u liniji " + parser.getLine() + ": Neslaganje tipa u naredbi dodele." );
		    parser.errNo++;
		}
	}
      
    

              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(9/*Assignment*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expression ::= ApplyExpression 
            {
              Object RESULT = null;
		
    

              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(8/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expression ::= Assignment 
            {
              Object RESULT = null;

              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(8/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expressions ::= Expression 
            {
              Object RESULT = null;
		
   

              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(6/*Expressions*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expressions ::= Expressions SEMICOLON Expression 
            {
              Object RESULT = null;

              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(6/*Expressions*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= BOOLCONST 
            {
              Object RESULT = null;
		
    RESULT = parser.symbolTable.getType("bool")

              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(5/*Type*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= FLOATCONST 
            {
              Object RESULT = null;
		
	RESULT = parser.symbolTable.getType("float")

              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(5/*Type*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Type ::= INTCONST 
            {
              Object RESULT = null;
		
	RESULT = parser.symbolTable.getType("integer")

              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(5/*Type*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaration ::= Type ID SEMICOLON 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-2)).value;
		int imeleft = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-1)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-1)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-1)).value;
		
    if ( ! parser.symbolTable.addVar( ime, t ) )
	{
		System.out.println( "Greska u liniji " + parser.getLine() + ": " + "Promenljiva " + ime + " je vec deklarisana." );
        parser.errNo++;
		RESULT = new Variable( ime, t, null);
	}
	RESULT = new Variable( ime, t, null);

              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(4/*Declaration*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declarations ::= Declaration 
            {
              Object RESULT = null;
		
    System.out.println("Declarations! Linija" + parser.getLine());

              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declarations ::= Declarations Declaration 
            {
              Object RESULT = null;

              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Block ::= Declarations Expressions 
            {
              Object RESULT = null;
		
   

              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= MAIN Block EXIT 
            {
              Object RESULT = null;
		
    

              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          return CUP$Parserbezoporavka$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-1)).value;
		RESULT = start_val;
              CUP$Parserbezoporavka$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parserbezoporavka$stack.elementAt(CUP$Parserbezoporavka$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parserbezoporavka$parser.done_parsing();
          return CUP$Parserbezoporavka$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

