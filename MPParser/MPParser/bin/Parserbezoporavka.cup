import java_cup.runtime.*;
import java.io.*;
import java.util.*;

import SymbolTable.*;

parser code {:

	public int errNo = 0;
	public int warnNo = 0;

	SymbolTable symbolTable;
	
    public static void main( String[] args )
    {
        try
        {
            FileReader file = new FileReader( args[0] );
            Scanner scanner = new GenerisanaKlasa( file );
            Parserbezoporavka parser = new Parserbezoporavka( scanner );
			parser.parse();
			parser.checkWarnings();
			if ( parser.errNo == 0)
				System.out.println( "Analiza je zavrsena. U kodu nema sintaksnih gresaka!" );
			else
				System.out.println( "Analiza zavrsena. Broj gresaka: " + parser.errNo 
		         + " Broj upozorenja: " + parser.warnNo );
        }
        catch( Exception e )
        {
            e.printStackTrace();
        }
    }

	public void checkWarnings()
    {
      SymbolNode current = symbolTable.getVariables();
      while ( current != null )
      {
      	Variable var = ( Variable ) current;
      	if ( var.last_def == -1 && var.last_use == -1 )
      	{
      		System.out.println( "Upozorenje: Promenljiva " + var.name + 
      			" je deklarisana, ali se nigde ne koristi." );
      		warnNo++;
      	}
      	else if ( var.last_def > var.last_use )
      	{
      		System.out.println( "Upozorenje: Vrednost dodeljena promeljivoj " +
      		    var.name + " u liniji " + var.last_def + " se nigde ne koristi." );
      		warnNo++;
      	}
      	current = current.next;
      }
    }

    public void syntax_error(Symbol current_token)
    {

    }

    public void report_error(String message, Object info)
    {
        System.out.println( message );
    }

    public int getLine()
    {
        return ( ( GenerisanaKlasa ) getScanner() ).getLine();
    }
:};
init with {:
 symbolTable = new SymbolTable();
:} 

//Terminali INT, FLOAT, BOOL,
terminal MAIN, EXIT, ASSIGN, SEMICOLON, PLUS, MINUS, CONST;
terminal FOR, IN, OPENSQUARE, CLOSEDSQUARE, APPLY, TRUE, FALSE, COMM, COLON, COMMA;
terminal String ID;
terminal Bool BOOLCONST;
terminal Integer INTCONST;
terminal Float FLOATCONST;

// Neterminali
non terminal Program, Block, Declarations, Declaration, Type, Expressions, NameList;
non terminal Expression, Assignment, ArithmeticExpression, TermExpression, ApplyExpression, Konstanta;

// Gramatika

start with Program;

//PROGRAM**********************************************************


Program ::= MAIN Block EXIT
{:
    
:};


//BLOK**********************************************************


Block ::= Declarations Expressions
{:
   
:};


//DEKLARACIJA**********************************************************


Declarations ::= Declarations Declaration
| Declaration
{:
    System.out.println("Declarations! Linija" + parser.getLine());
:};

Declaration ::= Type:t ID:ime SEMICOLON
{:
    if ( ! parser.symbolTable.addVar( ime, t ) )
	{
		System.out.println( "Greska u liniji " + parser.getLine() + ": " + "Promenljiva " + ime + " je vec deklarisana." );
        parser.errNo++;
		RESULT = new Variable( ime, t, null);
	}
	RESULT = new Variable( ime, t, null);
:};

//TIP**********************************************************




Type ::= INTCONST
{:
	RESULT = parser.symbolTable.getType("integer")
:}
| FLOATCONST
{:
	RESULT = parser.symbolTable.getType("float")
:}
| BOOLCONST
{:
    RESULT = parser.symbolTable.getType("bool")
:};




Expressions ::= Expressions SEMICOLON Expression | Expression
{:
   
:};

Expression ::= Assignment
| ApplyExpression
{:
    
:};




Assignment ::= ID:ime ASSIGN ArithmeticExpression:i
{:

	
	Variable var = parser.symbolTable.getVar( ime );
	if ( var == null )
	{
		System.out.println( "Greska u liniji " + parser.getLine() + ": promenljiva " + ime + " nije deklarisana.");
		parser.errNo++;
	}
	else 
	{
		var.last_def = parser.getLine();
		if ( var.type.tkind != i.tkind )
		{
			System.out.println( "Greska u liniji " + parser.getLine() + ": Neslaganje tipa u naredbi dodele." );
		    parser.errNo++;
		}
	}
      
    
:};





ArithmeticExpression ::= ArithmeticExpression: PLUS TermExpression

| ArithmeticExpression MINUS TermExpression

| TermExpression
{:
    
:};

TermExpression ::= CONST | ID
{:
    
:};



ApplyExpression ::= FOR ID:ime IN OPENSQUARE NameList:lista CLOSEDSQUARE APPLY Expression
{:
   
    Variable var = parser.symbolTable.getVar( ime );

    if (var == null) {
        parser.report_error("Promenljiva " + varName + " nije deklarisana.", $2);
    } else if (!var.getType().equals(listType)) {
        parser.report_error("Promenljiva " + varName + " mora biti istog tipa kao i NameList.", $2);
    }
:};


Konstanta ::= INTCONST:c
        {:
            RESULT = new Constant( parser.symbolTable.getType( "int" ), c );
        :}
        | FLOATCONST:c
        {:
            RESULT = new Constant( parser.symbolTable.getType( "double" ), c );
        :}
        | BOOLCONST:c
        {:
            RESULT = new Constant( parser.symbolTable.getType( "bool" ), c );
        :};

NameList ::= NameList:niz COMMA ID:ime
|

{:
		RESULT = niz;
		RESULT.add(ime);
:}
| ID
{:
		RESULT = new ArrayList();
		RESULT.add(ime);
:}
;
    
