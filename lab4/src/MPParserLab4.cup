//import section

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

import SymbolTable.*;

parser code {:
   public int errNo = 0;
   public int warnNo = 0;
   
   SymbolTable symbolTable;
   
   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   java_cup.runtime.Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
		   parser.checkWarnings();
		   if ( parser.errNo == 0 && parser.warnNo == 0 )
		      System.out.println( "Analiza zavrsena. U kodu nema gresaka." );
		   else
		      System.out.println( "Analiza zavrsena. Broj gresaka: " + parser.errNo 
		         + " Broj upozorenja: " + parser.warnNo );
	  }
	  catch( Exception e )
	  {
		   e.printStackTrace();
	  }
   }
   
   public void checkWarnings()
   {
      SymbolNode current = symbolTable.getVariables();
      while ( current != null )
      {
      	Variable var = ( Variable ) current;
      	if ( var.last_def == -1 && var.last_use == -1 )
      	{
      		System.out.println( "Upozorenje: Promenljiva " + var.name + 
      			" je deklarisana, ali se nigde ne koristi." );
      		warnNo++;
      	}
      	else if ( var.last_def > var.last_use )
      	{
      		System.out.println( "Upozorenje: Vrednost dodeljena promeljivoj " +
      		    var.name + " u liniji " + var.last_def + " se nigde ne koristi." );
      		warnNo++;
      	}
      	current = current.next;
     }
   }
   
   public void syntax_error(Symbol cur_token)
   {
   	  
   }
   
   public void report_error(String message, Object info)
   {
   	   System.out.print( message );
   }
   
   public int getLine()
   {
   	  return (( MPLexer) getScanner()).getLine();
   }
:};

init with {:
	symbolTable = new SymbolTable();
:}
//Terminal symbols
terminal MAIN, EXIT, ASSIGN, SEMICOLON, PLUS, MINUS, CONST, INT, FLOAT, BOOL;
terminal FOR, IN, OPENSQUARE, CLOSEDSQUARE, APPLY, TRUE, FALSE, COMM, COLON, COMMA;
terminal String ID;
terminal Integer INTCONST;
terminal Float FLOATCONST;
terminal Boolean BOOLCONST;

//Nonterminal symbols
non terminal Program, Block, Declarations, Declaration, Type, Expressions, Expression;
non terminal Assignment, ApplyExpression;

non terminal Type Tip,ArithmeticExpression, TermExpression, NameList;
non terminal Variable Var;
non terminal Constant Konstanta;


Program ::= MAIN Block EXIT
            {:

            :};

Block ::= Declarations Expressions
          {:
          :};

Declarations ::= Declarations Declaration
               | Declaration
               ;

Declaration ::= Type:t ID:ime SEMICOLON
               {:
                   if (!parser.symbolTable.addVar(ime, t)) {
                       System.out.println("Greska u liniji " + parser.getLine() +
                                          ": Promenljiva " + ime + " je vec deklarisana.");
                       parser.errNo++;
                   }
               :};

Type ::= INT
        {:
            RESULT = parser.symbolTable.getType("int");
        :}
      | FLOAT
        {:
            RESULT = parser.symbolTable.getType("float");
        :}
      | BOOL
        {:
            RESULT = parser.symbolTable.getType("bool");
        :}
      ;

Expressions ::= Expressions SEMICOLON Expression
              | Expression
              ;

Expression ::= Assignment
             | ApplyExpression
             ;

Assignment ::= ID:ime ASSIGN ArithmeticExpression:expr
              {:
                  Variable var = parser.symbolTable.getVar(ime);
                  if (var == null) {
                      System.out.println("Greska u liniji " + parser.getLine() +
                                         ": promenljiva " + ime + " nije deklarisana.");
                      parser.errNo++;
                  } else {
                      boolean compatible = false;
                      
                      if (expr.type.tkind == var.type.tkind) {
                          compatible = true;
                      }
                      else if (expr.type.tkind == Type.INT && var.type.tkind == Type.FLOAT) {
                          compatible = true;
                      }
                      
                      if (!compatible) {
                          if (expr.type.tkind == Type.FLOAT && var.type.tkind == Type.INT) {
                              System.out.println("Greska u liniji " + parser.getLine() +
                                                 ": Nije moguća implicitna konverzija iz float u int.");
                          } else if (expr.type.tkind == Type.BOOL || var.type.tkind == Type.BOOL) {
                              System.out.println("Greska u liniji " + parser.getLine() +
                                                 ": Nije moguća konverzija između bool i numeričkog tipa.");
                          } else {
                              System.out.println("Greska u liniji " + parser.getLine() +
                                                 ": Neslaganje tipova u naredbi dodele.");
                          }
                          parser.errNo++;
                      } else {
                          var.last_def = parser.getLine();
                          var.initialized = true;
                      }
                  }
              :};

ArithmeticExpression ::= ArithmeticExpression:left PLUS TermExpression:right
                       {:
                           boolean leftNumeric = (left.type.tkind == Type.INT || left.type.tkind == Type.FLOAT);
                           boolean rightNumeric = (right.type.tkind == Type.INT || right.type.tkind == Type.FLOAT);
                           
                           if (!leftNumeric || !rightNumeric) {
                               if (left.type.tkind == Type.BOOL || right.type.tkind == Type.BOOL) {
                                   System.out.println("Greska u liniji " + parser.getLine() +
                                                      ": Aritmeticki operatori se ne mogu primeniti nad bool tipom.");
                               } else {
                                   System.out.println("Greska u liniji " + parser.getLine() +
                                                      ": Aritmeticki operatori se mogu primeniti samo nad numeričkim tipovima (int, float).");
                               }
                               parser.errNo++;
                           } else {
                               Type resultType;
                               if (left.type.tkind == Type.FLOAT || right.type.tkind == Type.FLOAT) {
                                   resultType = parser.symbolTable.getType("float");
                               } else {
                                   resultType = parser.symbolTable.getType("int");
                               }
                               RESULT = new Constant(resultType, 0);
                           }
                       :}
                       | ArithmeticExpression:left MINUS TermExpression:right
                       {:
                           boolean leftNumeric = (left.type.tkind == Type.INT || left.type.tkind == Type.FLOAT);
                           boolean rightNumeric = (right.type.tkind == Type.INT || right.type.tkind == Type.FLOAT);
                           
                           if (!leftNumeric || !rightNumeric) {
                               if (left.type.tkind == Type.BOOL || right.type.tkind == Type.BOOL) {
                                   System.out.println("Greska u liniji " + parser.getLine() +
                                                      ": Aritmeticki operatori se ne mogu primeniti nad bool tipom.");
                               } else {
                                   System.out.println("Greska u liniji " + parser.getLine() +
                                                      ": Aritmeticki operatori se mogu primeniti samo nad numeričkim tipovima (int, float).");
                               }
                               parser.errNo++;
                           } else {
                               Type resultType;
                               if (left.type.tkind == Type.FLOAT || right.type.tkind == Type.FLOAT) {
                                   resultType = parser.symbolTable.getType("float");
                               } else {
                                   resultType = parser.symbolTable.getType("int");
                               }
                               RESULT = new Constant(resultType, 0);
                           }
                       :}
                       | TermExpression:term
                       {:
                           RESULT = term;
                       :}
                       ;

TermExpression ::= INTCONST
                 {:
                     RESULT = new Constant(parser.symbolTable.getType("int"), CONST_INT);
                 :}
               | FLOATCONST
                 {:
                     RESULT = new Constant(parser.symbolTable.getType("float"), CONST_FLOAT);
                 :}
               | BOOLCONST
                 {:
                     RESULT = new Constant(parser.symbolTable.getType("bool"), CONST_BOOL);
                 :}
               | ID:ime
                 {:
                     Variable var = parser.symbolTable.getVar(ime);
                     if (var == null) {
                         System.out.println("Greska u liniji " + parser.getLine() +
                                            ": promenljiva " + ime + " nije deklarisana.");
                         parser.errNo++;
                     } else {
                         RESULT = var.type;
                     }
                 :};

ApplyExpression ::= FOR ID:iter IN OPENSQUARE NameList:names CLOSEDSQUARE APPLY Expression:expr
                   {:
                       Type nameListType = null;
                       for (int i = 0; i < names.size(); i++) {
                           String varName = (String) names.get(i);
                           Variable var = parser.symbolTable.getVar(varName);
                           if (var != null) {
                               nameListType = var.type;
                               break;
                           }
                       }
                       
                       if (nameListType != null) {
                           Variable iterVar = parser.symbolTable.getVar(iter);
                           
                           if (iterVar != null) {
                               if (iterVar.type.tkind != nameListType.tkind) {
                                   System.out.println("Greska u liniji " + parser.getLine() +
                                                      ": Iterator " + iter + " mora biti istog tipa kao elementi NameList-e.");
                                   parser.errNo++;
                               } else {
                                   iterVar.last_use = parser.getLine();
                               }
                           } else {
                               if (!parser.symbolTable.addVar(iter, nameListType)) {
                                   System.out.println("Greska u liniji " + parser.getLine() +
                                                      ": Greska pri deklarisanju iteratora " + iter + ".");
                                   parser.errNo++;
                               }
                           }
                       } else {
                           if (!parser.symbolTable.addVar(iter, parser.symbolTable.getType("int"))) {
                               Variable iterVar = parser.symbolTable.getVar(iter);
                               if (iterVar != null) {
                                   iterVar.last_use = parser.getLine();
                               }
                           }
                       }
                   :};

NameList ::= NameList:niz COMMA ID:name
           {:
               Variable var = parser.symbolTable.getVar(name);
               if (var == null) {
                   System.out.println("Greska u liniji " + parser.getLine() +
                                      ": promenljiva " + name + " nije deklarisana.");
                   parser.errNo++;
                   RESULT = niz;
                   RESULT.add(name);
               } else {
                   var.last_use = parser.getLine();
                   
                   boolean typeMatch = true;
                   Type expectedType = null;
                   
                   for (int i = 0; i < niz.size(); i++) {
                       String existingName = (String) niz.get(i);
                       Variable existingVar = parser.symbolTable.getVar(existingName);
                       if (existingVar != null) {
                           expectedType = existingVar.type;
                           break;
                       }
                   }
                   
                   if (expectedType != null && var.type.tkind != expectedType.tkind) {
                       System.out.println("Greska u liniji " + parser.getLine() +
                                          ": Promenljiva " + name + " mora biti istog tipa kao ostale promenljive u listi.");
                       parser.errNo++;
                   }
                   
                   RESULT = niz;
                   RESULT.add(name);
               }
           :}
         | ID:name
           {:
               Variable var = parser.symbolTable.getVar(name);
               if (var == null) {
                   System.out.println("Greska u liniji " + parser.getLine() +
                                      ": promenljiva " + name + " nije deklarisana.");
                   parser.errNo++;
               } else {
                   var.last_use = parser.getLine();
               }
               
               RESULT = new ArrayList();
               RESULT.add(name);
           :};